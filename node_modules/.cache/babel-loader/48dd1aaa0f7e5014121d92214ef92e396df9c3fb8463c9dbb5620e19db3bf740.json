{"ast":null,"code":"var _jsxFileName = \"/Users/jun8ha/porters/src/pages/LoginPage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/LoginPage.jsx\nimport React, { useState } from 'react';\nimport LoginForm from '../components/Auth/LoginForm';\n// import { signInWithEmailAndPassword } from 'firebase/auth';\n// import { auth } from '../firebase';\nimport { login } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage({\n  onLoginSuccess\n}) {\n  _s();\n  const [loginError, setLoginError] = useState('');\n  const handleLogin = async (email, password) => {\n    // 백엔드 연동 코드 추가\n    try {\n      const res = await login(email, password);\n      localStorage.setItem('access', res.access);\n      localStorage.setItem('refresh', res.refresh);\n      onLoginSuccess();\n    } catch (err) {\n      console.error(err);\n      if (err.message.includes('No active account') || err.message.includes('Unable to log in')) {\n        setLoginError('이메일 또는 비밀번호가 올바르지 않아요');\n      } else {\n        setLoginError('로그인 중 오류가 발생했습니다');\n      }\n    }\n  };\n  // signInWithEmailAndPassword(auth, email, password)\n  // .then((userCredential) => {\n  //     console.log('로그인 성공:', userCredential.user);\n  //     // 로그인 성공 시 상태 업데이트나 페이지 이동 추가 가능\n  //     onLoginSuccess(); //<<--상태업데이트페이지전환\n  // })\n  // .catch((error) => {\n  //     // setError('로그인 실패: ' + error.message);\n  //     console.log(error.code); // 코드 예: \"auth/user-not-found\", \"auth/wrong-password\"\n  //     if (\n  //         error.code === \"auth/user-not-found\" ||\n  //         error.code === \"auth/wrong-password\"\n  //     ) {\n  //         setLoginError(\"이메일 또는 비밀번호가 올바르지 않아요\");\n  //     } else {\n  //         setLoginError(\"로그인 중 오류가 발생했습니다\");\n  //     }\n  // });   \n  // };\n\n  return /*#__PURE__*/_jsxDEV(LoginForm, {\n    onSubmit: handleLogin,\n    loginError: loginError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"/38XvAEdJ/tKbr57lP6DNyQKVnE=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","LoginForm","login","jsxDEV","_jsxDEV","LoginPage","onLoginSuccess","_s","loginError","setLoginError","handleLogin","email","password","res","localStorage","setItem","access","refresh","err","console","error","message","includes","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jun8ha/porters/src/pages/LoginPage.jsx"],"sourcesContent":["// src/pages/LoginPage.jsx\nimport React, { useState } from 'react';\nimport LoginForm from '../components/Auth/LoginForm';\n// import { signInWithEmailAndPassword } from 'firebase/auth';\n// import { auth } from '../firebase';\nimport { login } from '../api';\n\nexport default function LoginPage({ onLoginSuccess }) {\n  const [loginError, setLoginError] = useState('');\n\n  const handleLogin = async (email, password) => {\n    // 백엔드 연동 코드 추가\n    try {\n        const res = await login(email, password);\n        localStorage.setItem('access', res.access);\n        localStorage.setItem('refresh', res.refresh);\n        onLoginSuccess();\n        } catch (err) {\n        console.error(err);\n        if (\n            err.message.includes('No active account') || \n            err.message.includes('Unable to log in')\n          ) {\n            setLoginError('이메일 또는 비밀번호가 올바르지 않아요');\n          } else {\n            setLoginError('로그인 중 오류가 발생했습니다');\n          }\n        }\n    };\n    // signInWithEmailAndPassword(auth, email, password)\n    // .then((userCredential) => {\n    //     console.log('로그인 성공:', userCredential.user);\n    //     // 로그인 성공 시 상태 업데이트나 페이지 이동 추가 가능\n    //     onLoginSuccess(); //<<--상태업데이트페이지전환\n    // })\n    // .catch((error) => {\n    //     // setError('로그인 실패: ' + error.message);\n    //     console.log(error.code); // 코드 예: \"auth/user-not-found\", \"auth/wrong-password\"\n    //     if (\n    //         error.code === \"auth/user-not-found\" ||\n    //         error.code === \"auth/wrong-password\"\n    //     ) {\n    //         setLoginError(\"이메일 또는 비밀번호가 올바르지 않아요\");\n    //     } else {\n    //         setLoginError(\"로그인 중 오류가 발생했습니다\");\n    //     }\n    // });   \n    // };\n\n  return (\n    <LoginForm onSubmit={handleLogin} loginError={loginError} />\n  );\n}\n\n\n\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,8BAA8B;AACpD;AACA;AACA,SAASC,KAAK,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,SAASA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC7C;IACA,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMX,KAAK,CAACS,KAAK,EAAEC,QAAQ,CAAC;MACxCE,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,GAAG,CAACG,MAAM,CAAC;MAC1CF,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEF,GAAG,CAACI,OAAO,CAAC;MAC5CX,cAAc,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOY,GAAG,EAAE;MACdC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,IACIA,GAAG,CAACG,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,IACzCJ,GAAG,CAACG,OAAO,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EACxC;QACAb,aAAa,CAAC,uBAAuB,CAAC;MACxC,CAAC,MAAM;QACLA,aAAa,CAAC,kBAAkB,CAAC;MACnC;IACF;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,oBACEL,OAAA,CAACH,SAAS;IAACsB,QAAQ,EAAEb,WAAY;IAACF,UAAU,EAAEA;EAAW;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEhE;AAACpB,EAAA,CA7CuBF,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}