{"ast":null,"code":"var _jsxFileName = \"/Users/jun8ha/porters/src/pages/LoginPage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/LoginPage.jsx\nimport React, { useState } from 'react';\nimport LoginForm from '../components/Auth/LoginForm';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage({\n  onLoginSuccess\n}) {\n  _s();\n  const [loginError, setLoginError] = useState('');\n  const handleLogin = (email, password) => {\n    // 백엔드 연동 코드 추가\n    signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n      console.log('로그인 성공:', userCredential.user);\n      // 로그인 성공 시 상태 업데이트나 페이지 이동 추가 가능\n      onLoginSuccess(); //<<--상태업데이트페이지전환\n    }).catch(error => {\n      // setError('로그인 실패: ' + error.message);\n      console.log(error.code); // 코드 예: \"auth/user-not-found\", \"auth/wrong-password\"\n      if (error.code === \"auth/user-not-found\" || error.code === \"auth/wrong-password\") {\n        setLoginError(\"이메일 또는 비밀번호가 올바르지 않아요\");\n      } else {\n        setLoginError(\"로그인 중 오류가 발생했습니다\");\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(LoginForm, {\n    onSubmit: handleLogin,\n    loginError: loginError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"/38XvAEdJ/tKbr57lP6DNyQKVnE=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","LoginForm","signInWithEmailAndPassword","auth","jsxDEV","_jsxDEV","LoginPage","onLoginSuccess","_s","loginError","setLoginError","handleLogin","email","password","then","userCredential","console","log","user","catch","error","code","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jun8ha/porters/src/pages/LoginPage.jsx"],"sourcesContent":["// src/pages/LoginPage.jsx\nimport React, { useState } from 'react';\nimport LoginForm from '../components/Auth/LoginForm';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebase';\n\nexport default function LoginPage({ onLoginSuccess }) {\n  const [loginError, setLoginError] = useState('');\n\n  const handleLogin = (email, password) => {\n    // 백엔드 연동 코드 추가\n    signInWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n        console.log('로그인 성공:', userCredential.user);\n        // 로그인 성공 시 상태 업데이트나 페이지 이동 추가 가능\n        onLoginSuccess(); //<<--상태업데이트페이지전환\n    })\n    .catch((error) => {\n        // setError('로그인 실패: ' + error.message);\n        console.log(error.code); // 코드 예: \"auth/user-not-found\", \"auth/wrong-password\"\n        if (\n            error.code === \"auth/user-not-found\" ||\n            error.code === \"auth/wrong-password\"\n        ) {\n            setLoginError(\"이메일 또는 비밀번호가 올바르지 않아요\");\n        } else {\n            setLoginError(\"로그인 중 오류가 발생했습니다\");\n        }\n    });   \n    };\n\n  return (\n    <LoginForm onSubmit={handleLogin} loginError={loginError} />\n  );\n}\n\n\n\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,8BAA8B;AACpD,SAASC,0BAA0B,QAAQ,eAAe;AAC1D,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,eAAe,SAASC,SAASA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMW,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACvC;IACAX,0BAA0B,CAACC,IAAI,EAAES,KAAK,EAAEC,QAAQ,CAAC,CAChDC,IAAI,CAAEC,cAAc,IAAK;MACtBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,cAAc,CAACG,IAAI,CAAC;MAC3C;MACAX,cAAc,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MACd;MACAJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACzB,IACID,KAAK,CAACC,IAAI,KAAK,qBAAqB,IACpCD,KAAK,CAACC,IAAI,KAAK,qBAAqB,EACtC;QACEX,aAAa,CAAC,uBAAuB,CAAC;MAC1C,CAAC,MAAM;QACHA,aAAa,CAAC,kBAAkB,CAAC;MACrC;IACJ,CAAC,CAAC;EACF,CAAC;EAEH,oBACEL,OAAA,CAACJ,SAAS;IAACqB,QAAQ,EAAEX,WAAY;IAACF,UAAU,EAAEA;EAAW;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEhE;AAAClB,EAAA,CA5BuBF,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}