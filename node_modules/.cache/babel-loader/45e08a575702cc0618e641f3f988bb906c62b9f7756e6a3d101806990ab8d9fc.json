{"ast":null,"code":"// src/api.js\n\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n// 로그인\nexport const login = async (email, password) => {\n  const res = await fetch(`${BASE_URL}/api/auth/login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: email,\n      password\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) {\n    throw new Error(data.detail || '로그인 실패');\n  }\n\n  // 토큰 및 사용자 정보 반환\n  return data; // { access, refresh, user }\n};\n\n// 내 프로필 조회\nexport const getMyProfile = async token => {\n  const res = await fetch(`${BASE_URL}/api/profiles/me/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return await res.json();\n};\nexport const register = async (email, password1, password2) => {\n  const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/registration/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: email,\n      password1,\n      password2\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) {\n    // 백엔드에서 에러 메시지들이 객체로 올 수 있어서 예쁘게 정리\n    const errorMessages = Object.values(data).flat().join(' ');\n    throw new Error(errorMessages || '회원가입 실패');\n  }\n  return data; // { access, refresh, user }\n};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_URL","login","email","password","res","fetch","method","headers","body","JSON","stringify","username","data","json","ok","Error","detail","getMyProfile","token","register","password1","password2","errorMessages","Object","values","flat","join"],"sources":["/Users/jun8ha/porters/src/api.js"],"sourcesContent":["// src/api.js\n\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n// 로그인\nexport const login = async (email, password) => {\n  const res = await fetch(`${BASE_URL}/api/auth/login/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ username: email, password }),\n  });\n\n  const data = await res.json();\n\n  if (!res.ok) {\n    throw new Error(data.detail || '로그인 실패');\n  }\n\n  // 토큰 및 사용자 정보 반환\n  return data; // { access, refresh, user }\n};\n\n// 내 프로필 조회\nexport const getMyProfile = async (token) => {\n  const res = await fetch(`${BASE_URL}/api/profiles/me/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  return await res.json();\n};\n\n\nexport const register = async (email, password1, password2) => {\n  const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/registration/`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      username: email,\n      password1,\n      password2,\n    }),\n  });\n\n  const data = await res.json();\n\n  if (!res.ok) {\n    // 백엔드에서 에러 메시지들이 객체로 올 수 있어서 예쁘게 정리\n    const errorMessages = Object.values(data)\n      .flat()\n      .join(' ');\n    throw new Error(errorMessages || '회원가입 실패');\n  }\n\n  return data; // { access, refresh, user }\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE9C;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,kBAAkB,EAAE;IACrDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,QAAQ,EAAET,KAAK;MAAEC;IAAS,CAAC;EACpD,CAAC,CAAC;EAEF,MAAMS,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAI,CAACT,GAAG,CAACU,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,QAAQ,CAAC;EAC1C;;EAEA;EACA,OAAOJ,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,MAAMd,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,mBAAmB,EAAE;IACtDU,OAAO,EAAE;MACP,eAAe,EAAE,UAAUW,KAAK;IAClC;EACF,CAAC,CAAC;EACF,OAAO,MAAMd,GAAG,CAACS,IAAI,CAAC,CAAC;AACzB,CAAC;AAGD,OAAO,MAAMM,QAAQ,GAAG,MAAAA,CAAOjB,KAAK,EAAEkB,SAAS,EAAEC,SAAS,KAAK;EAC7D,MAAMjB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,CAACC,GAAG,CAACC,iBAAiB,yBAAyB,EAAE;IACjFM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,QAAQ,EAAET,KAAK;MACfkB,SAAS;MACTC;IACF,CAAC;EACH,CAAC,CAAC;EAEF,MAAMT,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAI,CAACT,GAAG,CAACU,EAAE,EAAE;IACX;IACA,MAAMQ,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACZ,IAAI,CAAC,CACtCa,IAAI,CAAC,CAAC,CACNC,IAAI,CAAC,GAAG,CAAC;IACZ,MAAM,IAAIX,KAAK,CAACO,aAAa,IAAI,SAAS,CAAC;EAC7C;EAEA,OAAOV,IAAI,CAAC,CAAC;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}